Comprehensive AWS-based infrastructure for the AdhereLive application, equivalent to the Azure deployment. 
Here's a summary of what is required:

## AWS Infrastructure Overview

### Key Components

1. *Network Architecture*:
   - VPC with proper public and private subnets across two availability zones
   - Internet Gateway for public access
   - NAT Gateway for private subnet outbound connectivity
   - Security groups for fine-grained access control

2. *Compute Resources*:
   - EC2 instances for frontend and backend servers
   - Ubuntu Linux with Docker, Node.js, and Nginx setup
   - User data scripts for automatic configuration and application setup

3. *Database Services*:
   - RDS MySQL for relational data storage
   - DocumentDB (AWS's MongoDB-compatible service) 
   - ElastiCache for Redis caching
   - All databases in private subnets for security

4. *DNS & Networking*:
   - Route 53 for domain management
   - Elastic IPs for static public addresses
   - HTTPS setup with Let's Encrypt

### Key AWS-Specific Features

Unlike the Azure version, the AWS implementation includes:

1. *Multi-AZ Setup*: Resources spread across two availability zones for better reliability
2. *NAT Gateway*: Provides private subnet connectivity to the internet
3. *DocumentDB*: AWS's managed service compatible with MongoDB
4. *Elastic IPs*: Ensures your public IP addresses remain static even if instances restart

## Deployment Instructions

The deployment process is similar to Azure:
1. Configure your AWS credentials
2. Set up your terraform.tfvars file
3. Run terraform commands to create the infrastructure
4. Deploy your GitHub SSH key to access repositories
5. The scripts will handle building Docker images and setting up applications

## Next Steps

To deploy this infrastructure:
1. Review the Terraform configuration files to ensure they meet your needs
2. Update the AMI ID to the latest Ubuntu version in your chosen region
3. Follow the detailed steps in the AWS Deployment Guide


The diagram visually represents the security boundaries, network segmentation, and service interconnections in your infrastructure.


flowchart TB
    subgraph Internet["Internet"]
        Users((Users))
        GitHub[("GitHub Repositories\n- adherelive-web\n- adherelive-fe")]
    end

    subgraph AWS["AWS Cloud"]
        subgraph VPC["VPC (10.0.0.0/16)"]
            subgraph PublicSubnets["Public Subnets"]
                PublicSubnetA["Public Subnet A\n10.0.1.0/24"]
                PublicSubnetB["Public Subnet B\n10.0.2.0/24"]
                
                FrontendEC2["Frontend EC2\nUbuntu + Nginx + Docker"]
                BackendEC2["Backend EC2\nUbuntu + Nginx + Node.js"]
                
                PublicSubnetA --> FrontendEC2
                PublicSubnetA --> BackendEC2
            end
            
            subgraph PrivateSubnets["Private Subnets"]
                PrivateSubnetA["Private Subnet A\n10.0.3.0/24"]
                PrivateSubnetB["Private Subnet B\n10.0.4.0/24"]
                
                subgraph DatabaseServices["Database Services"]
                    RDS[("RDS MySQL\nadhere database")]
                    DocumentDB[("DocumentDB\nMongoDB API")]
                    ElastiCache[("ElastiCache Redis\nCache layer")]
                end
                
                PrivateSubnetA --- DatabaseServices
                PrivateSubnetB --- DatabaseServices
            end
            
            subgraph NetworkComponents["Network Components"]
                IGW["Internet Gateway"]
                NATGW["NAT Gateway"]
                RouteTablePublic["Public Route Table"]
                RouteTablePrivate["Private Route Table"]
                
                SecurityGroups["Security Groups\n- Frontend SG\n- Backend SG\n- Database SG"]
            end
        end
        
        subgraph Route53["Route53 DNS"]
            DNSZone["DNS Zone\nadherelive.com"]
            DNSRecords["DNS Records\n- @ (root domain)\n- www\n- api"]
        end
        
        subgraph ElasticIPs["Elastic IPs"]
            FrontendEIP["Frontend EIP"]
            BackendEIP["Backend EIP"]
        end
    end

    Users -- "HTTPS" --> FrontendEIP
    Users -- "HTTPS API Calls" --> BackendEIP
    
    FrontendEIP --> FrontendEC2
    BackendEIP --> BackendEC2
    
    GitHub --> FrontendEC2
    GitHub --> BackendEC2
    
    FrontendEC2 --- BackendEC2
    
    BackendEC2 --> RDS
    BackendEC2 --> DocumentDB
    BackendEC2 --> ElastiCache
    
    IGW --- PublicSubnets
    NATGW --- PrivateSubnets
    
    RouteTablePublic --- PublicSubnets
    RouteTablePrivate --- PrivateSubnets
    
    SecurityGroups --- FrontendEC2
    SecurityGroups --- BackendEC2
    SecurityGroups --- DatabaseServices
    
    Route53 --- FrontendEIP
    Route53 --- BackendEIP

    classDef aws fill:#FF9900,stroke:#fff,stroke-width:2px,color:#fff
    classDef ec2 fill:#F1C232,stroke:#333,stroke-width:2px,color:#000
    classDef database fill:#8E24AA,stroke:#fff,stroke-width:2px,color:#fff
    classDef networking fill:#5A9BD5,stroke:#333,stroke-width:2px,color:#000
    classDef subnet fill:#D9EAD3,stroke:#333,stroke-width:1px,color:#000
    classDef secgroup fill:#F6B26B,stroke:#333,stroke-width:2px,color:#000
    classDef public fill:#A4C2F4,stroke:#333,stroke-width:1px,color:#000
    classDef private fill:#D5A6BD,stroke:#333,stroke-width:1px,color:#000

    class AWS,VPC aws
    class FrontendEC2,BackendEC2 ec2
    class RDS,DocumentDB,ElastiCache database
    class IGW,NATGW,RouteTablePublic,RouteTablePrivate,FrontendEIP,BackendEIP networking
    class PublicSubnetA,PublicSubnetB subnet
    class PrivateSubnetA,PrivateSubnetB subnet
    class SecurityGroups secgroup
    class PublicSubnets public
    class PrivateSubnets private